swagger: '2.0'
info:
  title: IdeaMarket API
  description: IdeaMarket API Definition
  version: '0.2.0'
# the domain of the service
host: localhost:1337
# array of all schemes that your API supports
schemes:
  - http
# will be prefixed to all paths
basePath: /api/v1
produces:
  - application/json
paths:
  /auth/sign-up:
    post:
      description: User sign-up API
      parameters:
        - name: username
          in: formData
          description: For local authentication this is the email of the user.
          type: string
          required: true
        - name: password
          in: formData
          description: The password to use when logging-in
          type: string
          format: password
          required: true
        - name: name
          in: formData
          description: The fullname of the user
          type: string
          required: true
      tags:
        - Authentication
      responses:
        200:
          description: Creates new authentication credentials
          schema:
            $ref: '#/definitions/User'
        400:
          description: Invalid attributes
          schema:
            $ref: '#/definitions/Error'
  /auth/login:
    post:
      description: THe API for login
      parameters:
        - name: idea
          in: body
          description: The authentication JSON to be used for authentication
          schema:
            $ref: '#/definitions/Authentication'
          required: true
      tags:
        - Authentication
      responses:
        200:
          description: User was successfully logged-in into the system
  /auth/change-password:
    put:
      description: The API when changing password
      parameters:
        - name: idea
          in: body
          description: The idea JSON you want to post
          schema:
            $ref: '#/definitions/Authentication'
          required: true
      tags:
        - Authentication
      responses:
        200:
          description: User password was successfully updated.
  /ideas:
    get:
      summary: Retrieves all ideas given the search parameters
      description: |
        The endpoint returns information about a idea.
      parameters:
        - name: q
          in: query
          description: The search string for the idea. This will be match againts the idea title, content, and tags
          required: false
          type: string
      tags:
        - Ideas
      responses:
        200:
          description: An array of ideas
          schema:
            type: array
            items:
              $ref: '#/definitions/Idea'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Creates a new Idea
      parameters:
        - name: idea
          in: body
          description: The idea JSON you want to post
          schema:
            $ref: '#/definitions/Idea'
          required: true
      tags:
        - Ideas
      responses:
        200:
          description: Make a new idea
  /ideas/{id}:
    get:
      summary: Retrieves an idea using its ID
      parameters:
        - name: id
          in: path
          type: string
          description: ID of the idea
          required: true
      tags:
        - Ideas
      responses:
        200:
          description: Sends the Idea with GUID
    put:
      summary: Updates an Idea
      parameters:
        - name: id
          in: path
          type: string
          description: ID of the idea
          required: true
        - name: body
          in: body
          description: No need to add Child object that is not updated.
          required: false
          schema:
            $ref: '#/definitions/Idea'
      tags:
        - Ideas
      responses:
        200:
          description: Sends the User with GUID        
  /ideas/{id}/comments:
    post:
      summary: adds a comment to an idea
      parameters:
        - name: id
          in: path
          type: string
          description: ID of the idea to which the comment will be added
          required: true
        - name: comment
          in: body
          description: Adds a comment to an Idea
          schema:
            $ref: '#/definitions/Comment'
          required: true
      tags:
        - Ideas
      responses:
        200:
          description: The idea with the new comment
          schema:
            $ref: '#/definitions/Idea'
    get:
      summary: Retrieves all comments from an Idea
      parameters:
        - name: id
          in: path
          type: string
          description: ID of the idea to which the comment will be added
          required: true
      tags:
        - Ideas
      responses:
        200:
          description: A new comment was added to the idea
          schema:
            $ref: '#/definitions/Comment'
  /ideas/{id}/stats:
    get:
      description: request for the statistics
      parameters:
        - name: id
          in: path
          type: string
          description: ID of the idea to which the comment will be added
          required: true
      tags:
        - Ideas
      responses:
        200:
          description: The stat for this idea
          schema:
           $ref: '#/definitions/IdeaStat'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /users:
    get:
      summary: User Information
      description: |
        The endpoint returns information about a user.
      parameters:
        - name: populate
          in: query
          description: Comma separated list of child objects to populate i.e. stat, auth.
          required: false
          type: string
      tags:
        - Users
      responses:
        200:
          description: An array of products
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      parameters:
        - name: user
          in: body
          description: The user JSON you want to post
          schema:
            $ref: '#/definitions/User'
          required: true
      tags:
        - Users
      responses:
        200:
          description: Make a new user
  /users/{id}:
    get:
      parameters:
        - name: id
          in: path
          type: string
          description: ID of the user
          required: true
        - name: populate
          in: query
          description: Comma separated list of child objects to populate i.e. stat, auth.
          required: false
          type: string
      tags:
        - Users
      responses:
        200:
          description: Sends the User with GUID
    put:
      parameters:
        - name: id
          in: path
          type: string
          description: ID of the user
          required: true
        - name: body
          in: body
          description: the description
          required: false
          schema:
            $ref: '#/definitions/User'
      tags:
        - Users
      responses:
        200:
          description: Sends the User with GUID
  /users/{id}/stat:
    get:
      description: the user statistics
      parameters:
        - name: id
          in: path
          type: string
          description: ID of the user
          required: true
      tags:
        - Users
      responses:
        200:
          description: Sends the User stat
          schema:
            $ref: '#/definitions/UserStat'
  /users/{id}/auth:
    get:
      parameters:
        - name: id
          in: path
          type: string
          description: ID of the user
          required: true
      tags:
        - Users
      responses:
        200:
          description: Sends the User stat
          schema:
            $ref: '#/definitions/UserStat'
definitions:
 Authentication:
  type: object
  description: Information to be used for user authentication.
  properties:
    id:
      type: integer
      format: int64
      description: Primary key. Auto-generated if not supplied
    username:
      type: string
      format: For local Authentication this is the User's email address
    password:
      type: string
      format: password
  required: ['username', 'password']
 Brand:
  type: object
  description: Existing brands i.e. Uber
  properties:
    id:
      type: integer
      format: int64
      description: primary key. not required. value is autogenerated
    name:
      type: string
      description: the popular name for the brand i.e. Uber
    officialName:
      type: string
      description: the formal name or could be the company name i.e. Uber Technologies Inc.
    tags:
     type: array
     description: can be used to filter and search ideas
     items: 
      type: string
    url:
      type: string
      description: url for the brand
  required: ['id', 'name']
 Comment:
  type: object
  description: Idea comment. Introduced to cultivate interaction among members, to provide feedback on an Idea and make it more stronger. Allow only 2 levels of comment.
  properties:
    id:
      type: integer
      format: int64
      description: Primary key. Value is auto-generated
    author:
      type: string
      description: User ID.
    parent:
      type: string
      description: Parent comment ID. Only present if comment is a reply to another comment.
    detail:
      type: string
      description: The comment content
    updatedAt:
      type: string
      format: dateTime
      description: Auto-generated by the system.
  required: ['author', 'detail']
 Error:
  type: object
  properties:
    code:
      type: integer
      format: int32
    status:
      type: integer
      format: int32
    reason:
      type: string
    details:
      type: string
    message:
      type: string
    invalidAttributes:
      type: string
 Idea:
  type: object
  description: Idea posted on IdeaMarket
  properties:
    access:
      type: string
      enum: ['public', 'private', 'protected']
      description: the access type for the idea |
                  defaults to public if not supplied |
                  Public - accessible to everyone, even users not logged-in to the application. No credits required to view. Search engine can crawl on the idea

                  Protected - Only logged-in users will be able to access it. Credit is required to view and set by the Ideator.  Can also be used when posting jobs. Search engine cannot crawl on the content of the idea.
                  
                  Private - Only logged-in users will be able to access it. Ideator will need to send invitation to other users to gain access to the idea. Ideators are charged for every private idea they create. This is for an Idea internally develop
    comments:
      type: array
      items: 
        $ref: '#/definitions/Comment'
    createdAt:
      type: string
      format: dateTime
      description: Auto-generated by the system. Together with updatedAt it will be used to determine if comment was updated since it was created.
    detail:
      type: string
      description: Idea full details
    id:
      type: string
      description: Auto-generated if not supplied. Unique identifier for the Idea.
    ideator:
      type: string
      description: User ID.
    status:
      type: string
      enum: ['draft', 'published']
      default: 'draft'
      description: Defaults to draft. | Only published ideas are searchable.
    similarApplications:
      type: array
      items:
        $ref: '#/definitions/Brand'
    stat:
      type: integer
      format: int64
      description: IdeaStat ID. During creation of Idea if not present, the object will be auto-generated.
    tags:
     type: array
     description: Can be used to filter and search ideas. Tags will also be used to tag existing ideas.
     items: 
      type: string
    title:
      type: string
      description: A short description for the Idea. The text to show on a list.
    updatedAt:
      type: string
      format: dateTime
      description: Auto-generated by the system. Together with createdAt it will be used to determine if comment was updated since it was created.
  required: ['detail', 'ideator', 'title']
 IdeaStat:
  type: object
  description: Idea statistics. Useful statistics to aid users when selecting ideas to view. Users are expected to view ideas with high views and likes.
  properties:
    id:
      type: integer
      format: int64
      description: primary key. value is autogenerated
    userViews:
      type: array
      items:
        $ref: '#/definitions/User'
    views:
      type: integer
      format: int32
      description: Every request in an Idea is counted as view even failed one. However, large number of views doesn't guarantee a strong idea since this can be exploited. The count is the total of protected and public views. if not for the public views we woudn't be needing this and will just use userViews size.
    likes:
      type: array
      items:
        $ref: '#/definitions/User'
    points:
      type: integer
      format: int32
      description: useful when calculating for a User's reputation. Points will come from number of views, number of likes, and number of comments. this only increases.
 User:
  type: object
  properties:
    id:
      type: string
      description: GUID. Auto-generated if not supplied
    name:
      type: string
      description: the name of the user that will be displayed in the application
    bio:
      type: string
      description: a short description for the user
    website:
      type: string
      description: the user's website
    auth:
      type: integer
      format: int64
      description: Authentication ID
    stat:
      type: integer
      format: int64
      description: UserStat ID
  required: ['name']
 UserStat:
  type: object
  description: Useful information before viewing a new idea. If the views and likes are small, viewers can check the ideators statistics before deciding to past or continue viewing the idea. Stat is updated every time an update on idea is performed.
  properties:
    id:
      type: integer
      format: int64
      description: Primary key. Value is autogenerated
    reputation:
      type: integer
      format: int32
      description: Reputation points will come from ideas posted and comments given. Idea points will come from likes and views.
    ideas:
      type: integer
      format: int32
      description: The total number of the ideas the Ideator has published.